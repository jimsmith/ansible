---
# tasks file for aws-ec2-provisioning/

#TODO merge with aws-lc/find-ami
- ec2_ami_find:
    name: "{{ ec2_find_ami_name }}"
    region: "{{ region }}"
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    virtualization_type: hvm
    #owner: 099720109477
    sort: name
    sort_order: descending
    sort_end: 1
  register: ec2_ami_find

- name: set fact ec2_base_image when ec2_find_ami_name is defined
  set_fact: 
    ec2_base_image: "{{ ec2_ami_find.results[0].ami_id }}"
  when: ec2_find_ami_name is defined

- name: launch instances
  ec2:
    assign_public_ip: "{{ ec2_assign_public_ip | default('no') }}"
    count: "{{ ec2_count | default(1) }}"
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    ebs_optimized: "{{ ec2_ebs_optimized | default(false) }}"
    group_id: "{{ ec2_sg_id }}"
    instance_type: "{{ ec2_instance_type | default('t2.micro') }}"
    instance_profile_name:  "{{ ec2_instance_profile_name | default ('')}}"
    user_data: "{{ ec2_user_data | default (omit) }}"
    image: "{{ ec2_base_image }}"
    key_name: "{{ ec2_key_name }}"
    monitoring: "{{ ec2_monitoring | default('yes') }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    instance_tags: "{{ aws_resource_tags }}"
    state: "{{ state | default('present') }}"
    volumes: "{{ ec2_volumes | default(omit) }}"
    wait: yes
  register: ec2

- copy: content="{{ ec2 }}" dest=~/ec2_fact

# - name: Add new instance to host group
#   add_host: hostname="{{ item.public_ip }}" groupname=ec2_launched ec2_id="{{ item.id }}"
#   with_items: "{{ ec2.instances }}"

# - lineinfile:
#     path: /etc/ansible/hosts
#     state: present
#     line: "{{ username }}@{{ item.public_ip }}"
#   with_items: "{{ ec2.instances }}"

# - name: example ec2 group
#   ec2_group:
#     name: ansible
#     description: Ansible group
#     vpc_id: "{{ ec2_vpc_id }}"
#     region: "{{ region }}"
#     rules:
#       - proto: tcp
#         from_port: 22
#         to_port: 22
#         cidr_ip: "{{ ansible_server_ip }}"
#   register: securitygroup

# - name: sg
#   set_fact: sg="{{ securitygroup.group_id }}"

# - name: Wait for SSH to come up
#   wait_for: host="{{ item.public_ip }}" port=22 delay=60 timeout=320 state=started
#   with_items: "{{ ec2.instances }}"

- name: set fact ec2_ami_instance_id
  set_fact: ec2_ami_instance_id="{{ ec2.instance_ids[0] }}"
  when: ec2 is defined
