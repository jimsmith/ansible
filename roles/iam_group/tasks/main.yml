---
# tasks file for aws-iam

- name: Set password policy
  shell:  export AWS_ACCESS_KEY_ID={{ aws_access_key }} && export AWS_SECRET_ACCESS_KEY={{ aws_secret_key }} && aws iam update-account-password-policy --minimum-password-length {{ password_length }} 
    --require-symbols --require-numbers --require-uppercase-characters --require-lowercase-characters 
    --allow-users-to-change-password --max-password-age {{ max_password_age }} --password-reuse-prevention {{ password_reuse_prevention }}

- iam_group:
    name: ansible-admins
    state: present
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    managed_policy:
      - arn:aws:iam::aws:policy/AdministratorAccess

- iam_group:
    name: "{{ limited_access_group_name }}"
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    state: present
    managed_policy: "{{ item }}"
  with_items:
    - "{{ limited_managed_policy }}"

- name: Create IAM role with custom trust relationship
  iam:
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    iam_type: role
    name: "{{ admin_role }}"
    state: present

- name: Attach Config and S3 policies to Role
  shell:  export AWS_ACCESS_KEY_ID={{ aws_access_key }} && export AWS_SECRET_ACCESS_KEY={{ aws_secret_key }} && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --role-name {{ admin_role }}

# - name: Create Admin Group
#   iam_policy:
#     aws_access_key: "{{aws_access_key}}"
#     aws_secret_key: "{{aws_secret_key}}"
#     iam_name: ansible-admins
#     iam_type: role
#     state: present
#     policy_name: AdministratorAccess
#     policy_json: "{{ lookup( 'file', 'policy.json') }}"


# - iam_role:
#     name: admins
#     assume_role_policy_document: "{{ lookup('file','policy.json') }}"
#     state: present
#     managed_policy:
#       - arn:aws:iam::aws:policy/AdministratorAccess

# - name: Create groups
#   iam:
#     iam_type: group
#     name: "{{ item.group_name }}"
#     state: "{{ item.state }}"
#   with_items:
#     - "{{ group_list }}"
#   when: group_list is defined

# - name: Create new IAM users with API keys
#   iam:
#     name: "{{ item.name }}"
#     state: "{{ ((item.state == None) | ternary('present', item.state)) }}"
#     iam_type: "{{ ((item.iam_type == None) | ternary('user', item.iam_type)) }}"
#     password: "{{ lookup('password', '/tmp/passwordfile chars=ascii_letters,digits,hexdigits,punctuation') }}"
# #    password: "{{ lookup('password', 'credentials/' + item.name + '/password.txt') }}"
#     update_password: on_create
#     groups: "{{ ((item.groups == None) | ternary([], item.groups)) }}"
#   with_items:
#     - "{{ users }}"

# - name: Create Roles
#   iam_role:
#     name: "{{ item.0.name }}"
#     assume_role_policy_document: "{{ ((item.0.policy == None) | ternary([], item.0.policy)) }}"
#     state: "{{ item.0.state }}"
#     managed_policy:
#       - "{{ item.1 }}"
#   with_subelements:
#      - "{{ roles }}"
#      - managed_policy

# - name: Create S3 policy from template
#   iam_policy:
#     iam_type: user
#     iam_name: "{{ item.name }}"
#     policy_name: "s3_limited_access_{{ item.name }}_prefix"
#     state: present
#     policy_json: " {{ lookup( 'file', '/etc/policy.json') }} "
#     with_items:
#       - "{{ users }}"


# - name: Create IAM role with custom trust relationship
#   iam:
#     iam_type: role
#     name: AnsibleStorageTestRole
#     state: present
#     trust_policy:
#       Version: '2012-10-17'
#       Statement:
#       - Action: sts:AssumeRole
#         Effect: Allow
#         Principal:
#           Service: storagegateway.amazonaws.com






