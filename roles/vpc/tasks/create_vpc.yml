---
# tasks file for vpc

- name: Create VPC
  ec2_vpc_net:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      cidr_block: "{{ vpc_cidr_block }}"
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      name: "{{ vpc_name }}"
      region: "{{ vpc_region }}"
      state: "{{ vpc_state }}"
      tenancy: "default"
      tags:
          Name: "{{ vpc_name }}"
          Purpose: "{{ vpc_purpose }}"
          Creator: "{{ vpc_creator }}"
          Environment: "{{ vpc_environment }}"
  register: vpc_result

- name: Store VPC ID
  set_fact:
    vpc_id: "{{ vpc_result.vpc.id }}"
    
- name: "Save vpc details"
  local_action: copy content="{{ vpc_result }}" dest="/var/lib/jenkins/workspace/VPCSetup/vpc.json"

- file:
    path: /var/lib/jenkins/workspace/VPCSetup/vpc.json
    owner: jenkins
    group: jenkins
    mode: 0644

- name: Gather Route Table Facts
  ec2_vpc_route_table_facts:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      filters:
          vpc-id: "{{ vpc_result.vpc.id }}"
  register: route_table_result

- name: Gather main Route Table Facts
  ec2_vpc_route_table_facts:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      filters:
          vpc-id: "{{ vpc_result.vpc.id }}"
          association.main: "true"
  register: main_table_result 

- debug:
    msg: "Result is {{ route_table_result }}"


- name: Store Default Route Table ID
  set_fact:
    default_route_table_id: "{{ route_table_result.route_tables[0].id }}"

- name: Store Main Route Table ID
  set_fact:
    main_route_table_id: "{{ main_table_result.route_tables[0].id }}"


# TODO: need to figure out how to enable auto-assign of public ips to anyting in the pubilc subnets
- name: Create Subnets
  ec2_vpc_subnet:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      az: "{{ item.az }}"
      cidr: "{{ item.cidr }}"
      region: "{{ vpc_region }}"
      state: "present"
      vpc_id: "{{ vpc_id }}"
      tags:
          Name: "{{ item.name }}"
          Purpose: "{{ item.purpose }}"
          Creator: "{{ vpc_creator }}"
          Environment: "{{ vpc_environment }}"
          Freetext: "{{ item.notes }}"
  with_items:
      - { name: "Public-Subnet-1A", az: "{{ vpc_region }}a", cidr: "{{ vpc_public_subnet_a_cidr_block }}", purpose: "Public subnet", notes: "None" }
      - { name: "Private-NAT-Subnet-1A" , az: "{{ vpc_region }}a", cidr: "{{ vpc_private_NAT_subnet_a_cidr_block }}", purpose: "NAT subnet", notes: "None" }
      - { name: "Private-No-NAT-Subnet-1A" , az: "{{ vpc_region }}a", cidr: "{{ vpc_private_NO_NAT_subnet_a_cidr_block }}", purpose: "NO_NAT subnet", notes: "None" }      
      - { name: "Public-Subnet-1B" , az: "{{ vpc_region }}b", cidr: "{{ vpc_public_subnet_b_cidr_block }}", purpose: "Public subnet", notes: "None" }
      - { name: "Private-NAT-Subnet-1B" , az: "{{ vpc_region }}b", cidr: "{{ vpc_private_NAT_subnet_b_cidr_block }}", purpose: "NAT subnet", notes: "None" }
      - { name: "Private-No-NAT-Subnet-1B" , az: "{{ vpc_region }}b", cidr: "{{ vpc_private_NO_NAT_subnet_b_cidr_block }}", purpose: "NO_NAT subnet", notes: "None" }


# # TODO: does not support tagging, so we can't create a billing report
- name: Create Internet Gateway
  ec2_vpc_igw:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      state: "present"
      vpc_id: "{{ vpc_id }}"
      tags: 
        Name: "{{ vpc_name }}-IGW"
  register: internet_gateway_result

- name: Store Internet Gateway ID
  set_fact:
    internet_gateway_id: "{{ internet_gateway_result.gateway_id }}"

- name: Create Public Route Table
  ec2_vpc_route_table:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      state: "present"
      vpc_id: "{{ vpc_id }}"
      routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ internet_gateway_id }}"
      subnets:
          - "{{ vpc_public_subnet_a_cidr_block }}"
          - "{{ vpc_public_subnet_b_cidr_block }}"
      tags:
          Name: "{{ vpc_name }}-IGW-RT"
          Purpose: "All traffic goes to the internet gateway"
          Creator: "{{ vpc_creator }}"
          Environment: "{{ vpc_environment }}"


- name: Tag No_NAT Route Table
  ec2_vpc_route_table:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      vpc_id: "{{ vpc_id }}"
      route_table_id: "{{ main_route_table_id }}"
      lookup: id
      subnets:
          - "{{ vpc_private_NO_NAT_subnet_a_cidr_block }}"
          - "{{ vpc_private_NO_NAT_subnet_b_cidr_block }}"
      tags:
          Name: "{{ vpc_name }}-NO-NAT-RT"
          Purpose: "{{ vpc_purpose }}"
          Creator: "{{ vpc_creator }}"
          Environment: "{{ vpc_environment }}"
          Freetext: "VPC's default route table"

- name: Gather Public Subnet IDs
  ec2_vpc_subnet_facts:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      filters:
          vpc-id: "{{ vpc_result.vpc.id }}"
          tag-value: "Public subnet"
  register: public_subnet_result

- name: Gather NAT Subnet IDs
  ec2_vpc_subnet_facts:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      filters:
          vpc-id: "{{ vpc_result.vpc.id }}"
          tag-value: "NAT subnet"
  register: nat_subnet_result

- name: Gather NO_NAT Subnet IDs
  ec2_vpc_subnet_facts:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      filters:
          vpc-id: "{{ vpc_result.vpc.id }}"
          tag-value: "NO_NAT subnet"
  register: no_nat_subnet_result

- name: Store Random nat Subnet ID
  set_fact:
    nat_gateway_subnet: "{{ nat_subnet_result.subnets[0].id }}"

- name: Store Random no_nat Subnet ID
  set_fact:
    nat_gateway_subnet: "{{ no_nat_subnet_result.subnets[0].id }}"

# TODO: does not currently allow for tagging
- name: Create NAT Gateway
  ec2_vpc_nat_gateway:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      if_exist_do_not_create: true
      region: "{{ vpc_region }}"
      state: "present"
      subnet_id: "{{ nat_gateway_subnet }}"
      wait: yes
  register: nat_gateway_result

- name: Store NAT Gateway ID
  set_fact:
    nat_gateway_id: "{{ nat_gateway_result.nat_gateway_id }}"

- name: Ensure tags are present on a resource
  ec2_tag:
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    region: "{{ vpc_region }}"
    resource: "{{ nat_gateway_result.nat_gateway_id }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-NAT-1A"

- name: Have Default Route Table Use The NAT Gateway
  ec2_vpc_route_table:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{ vpc_region }}"
      vpc_id: "{{ vpc_id }}"
      route_table_id: "{{ default_route_table_id }}"
      subnets:
          - "{{ vpc_private_NAT_subnet_a_cidr_block }}"
          - "{{ vpc_private_NAT_subnet_b_cidr_block }}"
      routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ nat_gateway_id }}"
      tags:
          Name: "{{ vpc_name }}-NAT-RT"
          Purpose: "{{ vpc_purpose }}"
          Creator: "{{ vpc_creator }}"
          Environment: "{{ vpc_environment }}"
          Freetext: "VPC's default route table"
